// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/traPtitech/Jomon/ent/request"
	"github.com/traPtitech/Jomon/ent/requesttarget"
	"github.com/traPtitech/Jomon/ent/user"
)

// RequestTarget is the model entity for the RequestTarget schema.
type RequestTarget struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount int `json:"amount,omitempty"`
	// PaidAt holds the value of the "paid_at" field.
	PaidAt *time.Time `json:"paid_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RequestTargetQuery when eager-loading is set.
	Edges               RequestTargetEdges `json:"edges"`
	request_target      *uuid.UUID
	request_target_user *uuid.UUID
}

// RequestTargetEdges holds the relations/edges for other nodes in the graph.
type RequestTargetEdges struct {
	// Request holds the value of the request edge.
	Request *Request `json:"request,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// RequestOrErr returns the Request value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RequestTargetEdges) RequestOrErr() (*Request, error) {
	if e.loadedTypes[0] {
		if e.Request == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: request.Label}
		}
		return e.Request, nil
	}
	return nil, &NotLoadedError{edge: "request"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RequestTargetEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RequestTarget) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case requesttarget.FieldAmount:
			values[i] = new(sql.NullInt64)
		case requesttarget.FieldPaidAt, requesttarget.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case requesttarget.FieldID:
			values[i] = new(uuid.UUID)
		case requesttarget.ForeignKeys[0]: // request_target
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case requesttarget.ForeignKeys[1]: // request_target_user
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type RequestTarget", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RequestTarget fields.
func (rt *RequestTarget) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case requesttarget.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				rt.ID = *value
			}
		case requesttarget.FieldAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				rt.Amount = int(value.Int64)
			}
		case requesttarget.FieldPaidAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field paid_at", values[i])
			} else if value.Valid {
				rt.PaidAt = new(time.Time)
				*rt.PaidAt = value.Time
			}
		case requesttarget.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				rt.CreatedAt = value.Time
			}
		case requesttarget.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field request_target", values[i])
			} else if value.Valid {
				rt.request_target = new(uuid.UUID)
				*rt.request_target = *value.S.(*uuid.UUID)
			}
		case requesttarget.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field request_target_user", values[i])
			} else if value.Valid {
				rt.request_target_user = new(uuid.UUID)
				*rt.request_target_user = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryRequest queries the "request" edge of the RequestTarget entity.
func (rt *RequestTarget) QueryRequest() *RequestQuery {
	return NewRequestTargetClient(rt.config).QueryRequest(rt)
}

// QueryUser queries the "user" edge of the RequestTarget entity.
func (rt *RequestTarget) QueryUser() *UserQuery {
	return NewRequestTargetClient(rt.config).QueryUser(rt)
}

// Update returns a builder for updating this RequestTarget.
// Note that you need to call RequestTarget.Unwrap() before calling this method if this RequestTarget
// was returned from a transaction, and the transaction was committed or rolled back.
func (rt *RequestTarget) Update() *RequestTargetUpdateOne {
	return NewRequestTargetClient(rt.config).UpdateOne(rt)
}

// Unwrap unwraps the RequestTarget entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rt *RequestTarget) Unwrap() *RequestTarget {
	_tx, ok := rt.config.driver.(*txDriver)
	if !ok {
		panic("ent: RequestTarget is not a transactional entity")
	}
	rt.config.driver = _tx.drv
	return rt
}

// String implements the fmt.Stringer.
func (rt *RequestTarget) String() string {
	var builder strings.Builder
	builder.WriteString("RequestTarget(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rt.ID))
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", rt.Amount))
	builder.WriteString(", ")
	if v := rt.PaidAt; v != nil {
		builder.WriteString("paid_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(rt.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// RequestTargets is a parsable slice of RequestTarget.
type RequestTargets []*RequestTarget
