// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/traPtitech/Jomon/ent/group"
	"github.com/traPtitech/Jomon/ent/groupbudget"
	"github.com/traPtitech/Jomon/ent/predicate"
	"github.com/traPtitech/Jomon/ent/transaction"
)

// GroupBudgetQuery is the builder for querying GroupBudget entities.
type GroupBudgetQuery struct {
	config
	ctx             *QueryContext
	order           []OrderFunc
	inters          []Interceptor
	predicates      []predicate.GroupBudget
	withGroup       *GroupQuery
	withTransaction *TransactionQuery
	withFKs         bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the GroupBudgetQuery builder.
func (gbq *GroupBudgetQuery) Where(ps ...predicate.GroupBudget) *GroupBudgetQuery {
	gbq.predicates = append(gbq.predicates, ps...)
	return gbq
}

// Limit the number of records to be returned by this query.
func (gbq *GroupBudgetQuery) Limit(limit int) *GroupBudgetQuery {
	gbq.ctx.Limit = &limit
	return gbq
}

// Offset to start from.
func (gbq *GroupBudgetQuery) Offset(offset int) *GroupBudgetQuery {
	gbq.ctx.Offset = &offset
	return gbq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (gbq *GroupBudgetQuery) Unique(unique bool) *GroupBudgetQuery {
	gbq.ctx.Unique = &unique
	return gbq
}

// Order specifies how the records should be ordered.
func (gbq *GroupBudgetQuery) Order(o ...OrderFunc) *GroupBudgetQuery {
	gbq.order = append(gbq.order, o...)
	return gbq
}

// QueryGroup chains the current query on the "group" edge.
func (gbq *GroupBudgetQuery) QueryGroup() *GroupQuery {
	query := (&GroupClient{config: gbq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gbq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gbq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(groupbudget.Table, groupbudget.FieldID, selector),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, groupbudget.GroupTable, groupbudget.GroupColumn),
		)
		fromU = sqlgraph.SetNeighbors(gbq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTransaction chains the current query on the "transaction" edge.
func (gbq *GroupBudgetQuery) QueryTransaction() *TransactionQuery {
	query := (&TransactionClient{config: gbq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gbq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gbq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(groupbudget.Table, groupbudget.FieldID, selector),
			sqlgraph.To(transaction.Table, transaction.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, groupbudget.TransactionTable, groupbudget.TransactionColumn),
		)
		fromU = sqlgraph.SetNeighbors(gbq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first GroupBudget entity from the query.
// Returns a *NotFoundError when no GroupBudget was found.
func (gbq *GroupBudgetQuery) First(ctx context.Context) (*GroupBudget, error) {
	nodes, err := gbq.Limit(1).All(setContextOp(ctx, gbq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{groupbudget.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (gbq *GroupBudgetQuery) FirstX(ctx context.Context) *GroupBudget {
	node, err := gbq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first GroupBudget ID from the query.
// Returns a *NotFoundError when no GroupBudget ID was found.
func (gbq *GroupBudgetQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = gbq.Limit(1).IDs(setContextOp(ctx, gbq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{groupbudget.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (gbq *GroupBudgetQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := gbq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single GroupBudget entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one GroupBudget entity is found.
// Returns a *NotFoundError when no GroupBudget entities are found.
func (gbq *GroupBudgetQuery) Only(ctx context.Context) (*GroupBudget, error) {
	nodes, err := gbq.Limit(2).All(setContextOp(ctx, gbq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{groupbudget.Label}
	default:
		return nil, &NotSingularError{groupbudget.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (gbq *GroupBudgetQuery) OnlyX(ctx context.Context) *GroupBudget {
	node, err := gbq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only GroupBudget ID in the query.
// Returns a *NotSingularError when more than one GroupBudget ID is found.
// Returns a *NotFoundError when no entities are found.
func (gbq *GroupBudgetQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = gbq.Limit(2).IDs(setContextOp(ctx, gbq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{groupbudget.Label}
	default:
		err = &NotSingularError{groupbudget.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (gbq *GroupBudgetQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := gbq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of GroupBudgets.
func (gbq *GroupBudgetQuery) All(ctx context.Context) ([]*GroupBudget, error) {
	ctx = setContextOp(ctx, gbq.ctx, "All")
	if err := gbq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*GroupBudget, *GroupBudgetQuery]()
	return withInterceptors[[]*GroupBudget](ctx, gbq, qr, gbq.inters)
}

// AllX is like All, but panics if an error occurs.
func (gbq *GroupBudgetQuery) AllX(ctx context.Context) []*GroupBudget {
	nodes, err := gbq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of GroupBudget IDs.
func (gbq *GroupBudgetQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if gbq.ctx.Unique == nil && gbq.path != nil {
		gbq.Unique(true)
	}
	ctx = setContextOp(ctx, gbq.ctx, "IDs")
	if err = gbq.Select(groupbudget.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (gbq *GroupBudgetQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := gbq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (gbq *GroupBudgetQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, gbq.ctx, "Count")
	if err := gbq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, gbq, querierCount[*GroupBudgetQuery](), gbq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (gbq *GroupBudgetQuery) CountX(ctx context.Context) int {
	count, err := gbq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (gbq *GroupBudgetQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, gbq.ctx, "Exist")
	switch _, err := gbq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (gbq *GroupBudgetQuery) ExistX(ctx context.Context) bool {
	exist, err := gbq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the GroupBudgetQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (gbq *GroupBudgetQuery) Clone() *GroupBudgetQuery {
	if gbq == nil {
		return nil
	}
	return &GroupBudgetQuery{
		config:          gbq.config,
		ctx:             gbq.ctx.Clone(),
		order:           append([]OrderFunc{}, gbq.order...),
		inters:          append([]Interceptor{}, gbq.inters...),
		predicates:      append([]predicate.GroupBudget{}, gbq.predicates...),
		withGroup:       gbq.withGroup.Clone(),
		withTransaction: gbq.withTransaction.Clone(),
		// clone intermediate query.
		sql:  gbq.sql.Clone(),
		path: gbq.path,
	}
}

// WithGroup tells the query-builder to eager-load the nodes that are connected to
// the "group" edge. The optional arguments are used to configure the query builder of the edge.
func (gbq *GroupBudgetQuery) WithGroup(opts ...func(*GroupQuery)) *GroupBudgetQuery {
	query := (&GroupClient{config: gbq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	gbq.withGroup = query
	return gbq
}

// WithTransaction tells the query-builder to eager-load the nodes that are connected to
// the "transaction" edge. The optional arguments are used to configure the query builder of the edge.
func (gbq *GroupBudgetQuery) WithTransaction(opts ...func(*TransactionQuery)) *GroupBudgetQuery {
	query := (&TransactionClient{config: gbq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	gbq.withTransaction = query
	return gbq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Amount int `json:"amount,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.GroupBudget.Query().
//		GroupBy(groupbudget.FieldAmount).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (gbq *GroupBudgetQuery) GroupBy(field string, fields ...string) *GroupBudgetGroupBy {
	gbq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &GroupBudgetGroupBy{build: gbq}
	grbuild.flds = &gbq.ctx.Fields
	grbuild.label = groupbudget.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Amount int `json:"amount,omitempty"`
//	}
//
//	client.GroupBudget.Query().
//		Select(groupbudget.FieldAmount).
//		Scan(ctx, &v)
func (gbq *GroupBudgetQuery) Select(fields ...string) *GroupBudgetSelect {
	gbq.ctx.Fields = append(gbq.ctx.Fields, fields...)
	sbuild := &GroupBudgetSelect{GroupBudgetQuery: gbq}
	sbuild.label = groupbudget.Label
	sbuild.flds, sbuild.scan = &gbq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a GroupBudgetSelect configured with the given aggregations.
func (gbq *GroupBudgetQuery) Aggregate(fns ...AggregateFunc) *GroupBudgetSelect {
	return gbq.Select().Aggregate(fns...)
}

func (gbq *GroupBudgetQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range gbq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, gbq); err != nil {
				return err
			}
		}
	}
	for _, f := range gbq.ctx.Fields {
		if !groupbudget.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if gbq.path != nil {
		prev, err := gbq.path(ctx)
		if err != nil {
			return err
		}
		gbq.sql = prev
	}
	return nil
}

func (gbq *GroupBudgetQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*GroupBudget, error) {
	var (
		nodes       = []*GroupBudget{}
		withFKs     = gbq.withFKs
		_spec       = gbq.querySpec()
		loadedTypes = [2]bool{
			gbq.withGroup != nil,
			gbq.withTransaction != nil,
		}
	)
	if gbq.withGroup != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, groupbudget.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*GroupBudget).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &GroupBudget{config: gbq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, gbq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := gbq.withGroup; query != nil {
		if err := gbq.loadGroup(ctx, query, nodes, nil,
			func(n *GroupBudget, e *Group) { n.Edges.Group = e }); err != nil {
			return nil, err
		}
	}
	if query := gbq.withTransaction; query != nil {
		if err := gbq.loadTransaction(ctx, query, nodes,
			func(n *GroupBudget) { n.Edges.Transaction = []*Transaction{} },
			func(n *GroupBudget, e *Transaction) { n.Edges.Transaction = append(n.Edges.Transaction, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (gbq *GroupBudgetQuery) loadGroup(ctx context.Context, query *GroupQuery, nodes []*GroupBudget, init func(*GroupBudget), assign func(*GroupBudget, *Group)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*GroupBudget)
	for i := range nodes {
		if nodes[i].group_group_budget == nil {
			continue
		}
		fk := *nodes[i].group_group_budget
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(group.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "group_group_budget" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (gbq *GroupBudgetQuery) loadTransaction(ctx context.Context, query *TransactionQuery, nodes []*GroupBudget, init func(*GroupBudget), assign func(*GroupBudget, *Transaction)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*GroupBudget)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.InValues(groupbudget.TransactionColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.group_budget_transaction
		if fk == nil {
			return fmt.Errorf(`foreign-key "group_budget_transaction" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "group_budget_transaction" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (gbq *GroupBudgetQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := gbq.querySpec()
	_spec.Node.Columns = gbq.ctx.Fields
	if len(gbq.ctx.Fields) > 0 {
		_spec.Unique = gbq.ctx.Unique != nil && *gbq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, gbq.driver, _spec)
}

func (gbq *GroupBudgetQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(groupbudget.Table, groupbudget.Columns, sqlgraph.NewFieldSpec(groupbudget.FieldID, field.TypeUUID))
	_spec.From = gbq.sql
	if unique := gbq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if gbq.path != nil {
		_spec.Unique = true
	}
	if fields := gbq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, groupbudget.FieldID)
		for i := range fields {
			if fields[i] != groupbudget.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := gbq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := gbq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := gbq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := gbq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (gbq *GroupBudgetQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(gbq.driver.Dialect())
	t1 := builder.Table(groupbudget.Table)
	columns := gbq.ctx.Fields
	if len(columns) == 0 {
		columns = groupbudget.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if gbq.sql != nil {
		selector = gbq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if gbq.ctx.Unique != nil && *gbq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range gbq.predicates {
		p(selector)
	}
	for _, p := range gbq.order {
		p(selector)
	}
	if offset := gbq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := gbq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// GroupBudgetGroupBy is the group-by builder for GroupBudget entities.
type GroupBudgetGroupBy struct {
	selector
	build *GroupBudgetQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (gbgb *GroupBudgetGroupBy) Aggregate(fns ...AggregateFunc) *GroupBudgetGroupBy {
	gbgb.fns = append(gbgb.fns, fns...)
	return gbgb
}

// Scan applies the selector query and scans the result into the given value.
func (gbgb *GroupBudgetGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, gbgb.build.ctx, "GroupBy")
	if err := gbgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*GroupBudgetQuery, *GroupBudgetGroupBy](ctx, gbgb.build, gbgb, gbgb.build.inters, v)
}

func (gbgb *GroupBudgetGroupBy) sqlScan(ctx context.Context, root *GroupBudgetQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(gbgb.fns))
	for _, fn := range gbgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*gbgb.flds)+len(gbgb.fns))
		for _, f := range *gbgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*gbgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := gbgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// GroupBudgetSelect is the builder for selecting fields of GroupBudget entities.
type GroupBudgetSelect struct {
	*GroupBudgetQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (gbs *GroupBudgetSelect) Aggregate(fns ...AggregateFunc) *GroupBudgetSelect {
	gbs.fns = append(gbs.fns, fns...)
	return gbs
}

// Scan applies the selector query and scans the result into the given value.
func (gbs *GroupBudgetSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, gbs.ctx, "Select")
	if err := gbs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*GroupBudgetQuery, *GroupBudgetSelect](ctx, gbs.GroupBudgetQuery, gbs, gbs.inters, v)
}

func (gbs *GroupBudgetSelect) sqlScan(ctx context.Context, root *GroupBudgetQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(gbs.fns))
	for _, fn := range gbs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*gbs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := gbs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
