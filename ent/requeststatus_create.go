// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/traPtitech/Jomon/ent/request"
	"github.com/traPtitech/Jomon/ent/requeststatus"
	"github.com/traPtitech/Jomon/ent/user"
)

// RequestStatusCreate is the builder for creating a RequestStatus entity.
type RequestStatusCreate struct {
	config
	mutation *RequestStatusMutation
	hooks    []Hook
}

// SetStatus sets the "status" field.
func (rsc *RequestStatusCreate) SetStatus(r requeststatus.Status) *RequestStatusCreate {
	rsc.mutation.SetStatus(r)
	return rsc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (rsc *RequestStatusCreate) SetNillableStatus(r *requeststatus.Status) *RequestStatusCreate {
	if r != nil {
		rsc.SetStatus(*r)
	}
	return rsc
}

// SetCreatedAt sets the "created_at" field.
func (rsc *RequestStatusCreate) SetCreatedAt(t time.Time) *RequestStatusCreate {
	rsc.mutation.SetCreatedAt(t)
	return rsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rsc *RequestStatusCreate) SetNillableCreatedAt(t *time.Time) *RequestStatusCreate {
	if t != nil {
		rsc.SetCreatedAt(*t)
	}
	return rsc
}

// SetID sets the "id" field.
func (rsc *RequestStatusCreate) SetID(u uuid.UUID) *RequestStatusCreate {
	rsc.mutation.SetID(u)
	return rsc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rsc *RequestStatusCreate) SetNillableID(u *uuid.UUID) *RequestStatusCreate {
	if u != nil {
		rsc.SetID(*u)
	}
	return rsc
}

// SetRequestID sets the "request" edge to the Request entity by ID.
func (rsc *RequestStatusCreate) SetRequestID(id uuid.UUID) *RequestStatusCreate {
	rsc.mutation.SetRequestID(id)
	return rsc
}

// SetRequest sets the "request" edge to the Request entity.
func (rsc *RequestStatusCreate) SetRequest(r *Request) *RequestStatusCreate {
	return rsc.SetRequestID(r.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (rsc *RequestStatusCreate) SetUserID(id uuid.UUID) *RequestStatusCreate {
	rsc.mutation.SetUserID(id)
	return rsc
}

// SetUser sets the "user" edge to the User entity.
func (rsc *RequestStatusCreate) SetUser(u *User) *RequestStatusCreate {
	return rsc.SetUserID(u.ID)
}

// Mutation returns the RequestStatusMutation object of the builder.
func (rsc *RequestStatusCreate) Mutation() *RequestStatusMutation {
	return rsc.mutation
}

// Save creates the RequestStatus in the database.
func (rsc *RequestStatusCreate) Save(ctx context.Context) (*RequestStatus, error) {
	rsc.defaults()
	return withHooks[*RequestStatus, RequestStatusMutation](ctx, rsc.sqlSave, rsc.mutation, rsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rsc *RequestStatusCreate) SaveX(ctx context.Context) *RequestStatus {
	v, err := rsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rsc *RequestStatusCreate) Exec(ctx context.Context) error {
	_, err := rsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rsc *RequestStatusCreate) ExecX(ctx context.Context) {
	if err := rsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rsc *RequestStatusCreate) defaults() {
	if _, ok := rsc.mutation.Status(); !ok {
		v := requeststatus.DefaultStatus
		rsc.mutation.SetStatus(v)
	}
	if _, ok := rsc.mutation.CreatedAt(); !ok {
		v := requeststatus.DefaultCreatedAt()
		rsc.mutation.SetCreatedAt(v)
	}
	if _, ok := rsc.mutation.ID(); !ok {
		v := requeststatus.DefaultID()
		rsc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rsc *RequestStatusCreate) check() error {
	if _, ok := rsc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "RequestStatus.status"`)}
	}
	if v, ok := rsc.mutation.Status(); ok {
		if err := requeststatus.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "RequestStatus.status": %w`, err)}
		}
	}
	if _, ok := rsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "RequestStatus.created_at"`)}
	}
	if _, ok := rsc.mutation.RequestID(); !ok {
		return &ValidationError{Name: "request", err: errors.New(`ent: missing required edge "RequestStatus.request"`)}
	}
	if _, ok := rsc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "RequestStatus.user"`)}
	}
	return nil
}

func (rsc *RequestStatusCreate) sqlSave(ctx context.Context) (*RequestStatus, error) {
	if err := rsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rsc.mutation.id = &_node.ID
	rsc.mutation.done = true
	return _node, nil
}

func (rsc *RequestStatusCreate) createSpec() (*RequestStatus, *sqlgraph.CreateSpec) {
	var (
		_node = &RequestStatus{config: rsc.config}
		_spec = sqlgraph.NewCreateSpec(requeststatus.Table, sqlgraph.NewFieldSpec(requeststatus.FieldID, field.TypeUUID))
	)
	if id, ok := rsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rsc.mutation.Status(); ok {
		_spec.SetField(requeststatus.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := rsc.mutation.CreatedAt(); ok {
		_spec.SetField(requeststatus.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := rsc.mutation.RequestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   requeststatus.RequestTable,
			Columns: []string{requeststatus.RequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: request.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.request_status = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rsc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   requeststatus.UserTable,
			Columns: []string{requeststatus.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.request_status_user = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RequestStatusCreateBulk is the builder for creating many RequestStatus entities in bulk.
type RequestStatusCreateBulk struct {
	config
	builders []*RequestStatusCreate
}

// Save creates the RequestStatus entities in the database.
func (rscb *RequestStatusCreateBulk) Save(ctx context.Context) ([]*RequestStatus, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rscb.builders))
	nodes := make([]*RequestStatus, len(rscb.builders))
	mutators := make([]Mutator, len(rscb.builders))
	for i := range rscb.builders {
		func(i int, root context.Context) {
			builder := rscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RequestStatusMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rscb *RequestStatusCreateBulk) SaveX(ctx context.Context) []*RequestStatus {
	v, err := rscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rscb *RequestStatusCreateBulk) Exec(ctx context.Context) error {
	_, err := rscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rscb *RequestStatusCreateBulk) ExecX(ctx context.Context) {
	if err := rscb.Exec(ctx); err != nil {
		panic(err)
	}
}
