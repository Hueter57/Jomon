// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/traPtitech/Jomon/ent/group"
	"github.com/traPtitech/Jomon/ent/groupbudget"
	"github.com/traPtitech/Jomon/ent/predicate"
	"github.com/traPtitech/Jomon/ent/transaction"
)

// GroupBudgetUpdate is the builder for updating GroupBudget entities.
type GroupBudgetUpdate struct {
	config
	hooks    []Hook
	mutation *GroupBudgetMutation
}

// Where appends a list predicates to the GroupBudgetUpdate builder.
func (gbu *GroupBudgetUpdate) Where(ps ...predicate.GroupBudget) *GroupBudgetUpdate {
	gbu.mutation.Where(ps...)
	return gbu
}

// SetAmount sets the "amount" field.
func (gbu *GroupBudgetUpdate) SetAmount(i int) *GroupBudgetUpdate {
	gbu.mutation.ResetAmount()
	gbu.mutation.SetAmount(i)
	return gbu
}

// AddAmount adds i to the "amount" field.
func (gbu *GroupBudgetUpdate) AddAmount(i int) *GroupBudgetUpdate {
	gbu.mutation.AddAmount(i)
	return gbu
}

// SetComment sets the "comment" field.
func (gbu *GroupBudgetUpdate) SetComment(s string) *GroupBudgetUpdate {
	gbu.mutation.SetComment(s)
	return gbu
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (gbu *GroupBudgetUpdate) SetNillableComment(s *string) *GroupBudgetUpdate {
	if s != nil {
		gbu.SetComment(*s)
	}
	return gbu
}

// ClearComment clears the value of the "comment" field.
func (gbu *GroupBudgetUpdate) ClearComment() *GroupBudgetUpdate {
	gbu.mutation.ClearComment()
	return gbu
}

// SetCreatedAt sets the "created_at" field.
func (gbu *GroupBudgetUpdate) SetCreatedAt(t time.Time) *GroupBudgetUpdate {
	gbu.mutation.SetCreatedAt(t)
	return gbu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gbu *GroupBudgetUpdate) SetNillableCreatedAt(t *time.Time) *GroupBudgetUpdate {
	if t != nil {
		gbu.SetCreatedAt(*t)
	}
	return gbu
}

// SetGroupID sets the "group" edge to the Group entity by ID.
func (gbu *GroupBudgetUpdate) SetGroupID(id uuid.UUID) *GroupBudgetUpdate {
	gbu.mutation.SetGroupID(id)
	return gbu
}

// SetGroup sets the "group" edge to the Group entity.
func (gbu *GroupBudgetUpdate) SetGroup(g *Group) *GroupBudgetUpdate {
	return gbu.SetGroupID(g.ID)
}

// AddTransactionIDs adds the "transaction" edge to the Transaction entity by IDs.
func (gbu *GroupBudgetUpdate) AddTransactionIDs(ids ...uuid.UUID) *GroupBudgetUpdate {
	gbu.mutation.AddTransactionIDs(ids...)
	return gbu
}

// AddTransaction adds the "transaction" edges to the Transaction entity.
func (gbu *GroupBudgetUpdate) AddTransaction(t ...*Transaction) *GroupBudgetUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return gbu.AddTransactionIDs(ids...)
}

// Mutation returns the GroupBudgetMutation object of the builder.
func (gbu *GroupBudgetUpdate) Mutation() *GroupBudgetMutation {
	return gbu.mutation
}

// ClearGroup clears the "group" edge to the Group entity.
func (gbu *GroupBudgetUpdate) ClearGroup() *GroupBudgetUpdate {
	gbu.mutation.ClearGroup()
	return gbu
}

// ClearTransaction clears all "transaction" edges to the Transaction entity.
func (gbu *GroupBudgetUpdate) ClearTransaction() *GroupBudgetUpdate {
	gbu.mutation.ClearTransaction()
	return gbu
}

// RemoveTransactionIDs removes the "transaction" edge to Transaction entities by IDs.
func (gbu *GroupBudgetUpdate) RemoveTransactionIDs(ids ...uuid.UUID) *GroupBudgetUpdate {
	gbu.mutation.RemoveTransactionIDs(ids...)
	return gbu
}

// RemoveTransaction removes "transaction" edges to Transaction entities.
func (gbu *GroupBudgetUpdate) RemoveTransaction(t ...*Transaction) *GroupBudgetUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return gbu.RemoveTransactionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gbu *GroupBudgetUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, GroupBudgetMutation](ctx, gbu.sqlSave, gbu.mutation, gbu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gbu *GroupBudgetUpdate) SaveX(ctx context.Context) int {
	affected, err := gbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gbu *GroupBudgetUpdate) Exec(ctx context.Context) error {
	_, err := gbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gbu *GroupBudgetUpdate) ExecX(ctx context.Context) {
	if err := gbu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gbu *GroupBudgetUpdate) check() error {
	if _, ok := gbu.mutation.GroupID(); gbu.mutation.GroupCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "GroupBudget.group"`)
	}
	return nil
}

func (gbu *GroupBudgetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := gbu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(groupbudget.Table, groupbudget.Columns, sqlgraph.NewFieldSpec(groupbudget.FieldID, field.TypeUUID))
	if ps := gbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gbu.mutation.Amount(); ok {
		_spec.SetField(groupbudget.FieldAmount, field.TypeInt, value)
	}
	if value, ok := gbu.mutation.AddedAmount(); ok {
		_spec.AddField(groupbudget.FieldAmount, field.TypeInt, value)
	}
	if value, ok := gbu.mutation.Comment(); ok {
		_spec.SetField(groupbudget.FieldComment, field.TypeString, value)
	}
	if gbu.mutation.CommentCleared() {
		_spec.ClearField(groupbudget.FieldComment, field.TypeString)
	}
	if value, ok := gbu.mutation.CreatedAt(); ok {
		_spec.SetField(groupbudget.FieldCreatedAt, field.TypeTime, value)
	}
	if gbu.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   groupbudget.GroupTable,
			Columns: []string{groupbudget.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: group.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gbu.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   groupbudget.GroupTable,
			Columns: []string{groupbudget.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gbu.mutation.TransactionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   groupbudget.TransactionTable,
			Columns: []string{groupbudget.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: transaction.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gbu.mutation.RemovedTransactionIDs(); len(nodes) > 0 && !gbu.mutation.TransactionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   groupbudget.TransactionTable,
			Columns: []string{groupbudget.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: transaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gbu.mutation.TransactionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   groupbudget.TransactionTable,
			Columns: []string{groupbudget.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: transaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{groupbudget.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gbu.mutation.done = true
	return n, nil
}

// GroupBudgetUpdateOne is the builder for updating a single GroupBudget entity.
type GroupBudgetUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GroupBudgetMutation
}

// SetAmount sets the "amount" field.
func (gbuo *GroupBudgetUpdateOne) SetAmount(i int) *GroupBudgetUpdateOne {
	gbuo.mutation.ResetAmount()
	gbuo.mutation.SetAmount(i)
	return gbuo
}

// AddAmount adds i to the "amount" field.
func (gbuo *GroupBudgetUpdateOne) AddAmount(i int) *GroupBudgetUpdateOne {
	gbuo.mutation.AddAmount(i)
	return gbuo
}

// SetComment sets the "comment" field.
func (gbuo *GroupBudgetUpdateOne) SetComment(s string) *GroupBudgetUpdateOne {
	gbuo.mutation.SetComment(s)
	return gbuo
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (gbuo *GroupBudgetUpdateOne) SetNillableComment(s *string) *GroupBudgetUpdateOne {
	if s != nil {
		gbuo.SetComment(*s)
	}
	return gbuo
}

// ClearComment clears the value of the "comment" field.
func (gbuo *GroupBudgetUpdateOne) ClearComment() *GroupBudgetUpdateOne {
	gbuo.mutation.ClearComment()
	return gbuo
}

// SetCreatedAt sets the "created_at" field.
func (gbuo *GroupBudgetUpdateOne) SetCreatedAt(t time.Time) *GroupBudgetUpdateOne {
	gbuo.mutation.SetCreatedAt(t)
	return gbuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gbuo *GroupBudgetUpdateOne) SetNillableCreatedAt(t *time.Time) *GroupBudgetUpdateOne {
	if t != nil {
		gbuo.SetCreatedAt(*t)
	}
	return gbuo
}

// SetGroupID sets the "group" edge to the Group entity by ID.
func (gbuo *GroupBudgetUpdateOne) SetGroupID(id uuid.UUID) *GroupBudgetUpdateOne {
	gbuo.mutation.SetGroupID(id)
	return gbuo
}

// SetGroup sets the "group" edge to the Group entity.
func (gbuo *GroupBudgetUpdateOne) SetGroup(g *Group) *GroupBudgetUpdateOne {
	return gbuo.SetGroupID(g.ID)
}

// AddTransactionIDs adds the "transaction" edge to the Transaction entity by IDs.
func (gbuo *GroupBudgetUpdateOne) AddTransactionIDs(ids ...uuid.UUID) *GroupBudgetUpdateOne {
	gbuo.mutation.AddTransactionIDs(ids...)
	return gbuo
}

// AddTransaction adds the "transaction" edges to the Transaction entity.
func (gbuo *GroupBudgetUpdateOne) AddTransaction(t ...*Transaction) *GroupBudgetUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return gbuo.AddTransactionIDs(ids...)
}

// Mutation returns the GroupBudgetMutation object of the builder.
func (gbuo *GroupBudgetUpdateOne) Mutation() *GroupBudgetMutation {
	return gbuo.mutation
}

// ClearGroup clears the "group" edge to the Group entity.
func (gbuo *GroupBudgetUpdateOne) ClearGroup() *GroupBudgetUpdateOne {
	gbuo.mutation.ClearGroup()
	return gbuo
}

// ClearTransaction clears all "transaction" edges to the Transaction entity.
func (gbuo *GroupBudgetUpdateOne) ClearTransaction() *GroupBudgetUpdateOne {
	gbuo.mutation.ClearTransaction()
	return gbuo
}

// RemoveTransactionIDs removes the "transaction" edge to Transaction entities by IDs.
func (gbuo *GroupBudgetUpdateOne) RemoveTransactionIDs(ids ...uuid.UUID) *GroupBudgetUpdateOne {
	gbuo.mutation.RemoveTransactionIDs(ids...)
	return gbuo
}

// RemoveTransaction removes "transaction" edges to Transaction entities.
func (gbuo *GroupBudgetUpdateOne) RemoveTransaction(t ...*Transaction) *GroupBudgetUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return gbuo.RemoveTransactionIDs(ids...)
}

// Where appends a list predicates to the GroupBudgetUpdate builder.
func (gbuo *GroupBudgetUpdateOne) Where(ps ...predicate.GroupBudget) *GroupBudgetUpdateOne {
	gbuo.mutation.Where(ps...)
	return gbuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gbuo *GroupBudgetUpdateOne) Select(field string, fields ...string) *GroupBudgetUpdateOne {
	gbuo.fields = append([]string{field}, fields...)
	return gbuo
}

// Save executes the query and returns the updated GroupBudget entity.
func (gbuo *GroupBudgetUpdateOne) Save(ctx context.Context) (*GroupBudget, error) {
	return withHooks[*GroupBudget, GroupBudgetMutation](ctx, gbuo.sqlSave, gbuo.mutation, gbuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gbuo *GroupBudgetUpdateOne) SaveX(ctx context.Context) *GroupBudget {
	node, err := gbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gbuo *GroupBudgetUpdateOne) Exec(ctx context.Context) error {
	_, err := gbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gbuo *GroupBudgetUpdateOne) ExecX(ctx context.Context) {
	if err := gbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gbuo *GroupBudgetUpdateOne) check() error {
	if _, ok := gbuo.mutation.GroupID(); gbuo.mutation.GroupCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "GroupBudget.group"`)
	}
	return nil
}

func (gbuo *GroupBudgetUpdateOne) sqlSave(ctx context.Context) (_node *GroupBudget, err error) {
	if err := gbuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(groupbudget.Table, groupbudget.Columns, sqlgraph.NewFieldSpec(groupbudget.FieldID, field.TypeUUID))
	id, ok := gbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GroupBudget.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gbuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, groupbudget.FieldID)
		for _, f := range fields {
			if !groupbudget.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != groupbudget.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gbuo.mutation.Amount(); ok {
		_spec.SetField(groupbudget.FieldAmount, field.TypeInt, value)
	}
	if value, ok := gbuo.mutation.AddedAmount(); ok {
		_spec.AddField(groupbudget.FieldAmount, field.TypeInt, value)
	}
	if value, ok := gbuo.mutation.Comment(); ok {
		_spec.SetField(groupbudget.FieldComment, field.TypeString, value)
	}
	if gbuo.mutation.CommentCleared() {
		_spec.ClearField(groupbudget.FieldComment, field.TypeString)
	}
	if value, ok := gbuo.mutation.CreatedAt(); ok {
		_spec.SetField(groupbudget.FieldCreatedAt, field.TypeTime, value)
	}
	if gbuo.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   groupbudget.GroupTable,
			Columns: []string{groupbudget.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: group.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gbuo.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   groupbudget.GroupTable,
			Columns: []string{groupbudget.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gbuo.mutation.TransactionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   groupbudget.TransactionTable,
			Columns: []string{groupbudget.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: transaction.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gbuo.mutation.RemovedTransactionIDs(); len(nodes) > 0 && !gbuo.mutation.TransactionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   groupbudget.TransactionTable,
			Columns: []string{groupbudget.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: transaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gbuo.mutation.TransactionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   groupbudget.TransactionTable,
			Columns: []string{groupbudget.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: transaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &GroupBudget{config: gbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{groupbudget.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	gbuo.mutation.done = true
	return _node, nil
}
